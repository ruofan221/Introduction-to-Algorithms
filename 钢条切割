#include<stdio.h>
#include<stdlib.h>


// MEMOIZED-CUT-ROD(p,n)
int MemoziedCutRod(int length, int *priceArray)
{
	int *profitArray = malloc(sizeof(int)*(length + 1));
	profitArray[0] = 0;
	for (int i = 1; i <= length; i++)
	{
		profitArray[i] = INT_MIN;
	}
	return MemoziedCutRodCalculate(length, priceArray, profitArray);

	/*int maxProfit = MemoziedCutRodCalculate(length, priceArray, profitArray);
	for (int i = 0; i <= length; i++)
	{
	printf_s("%d\t", profitArray[i]);
	}
	return maxProfit;*/
}

int MemoziedCutRodCalculate(int length, int *priceArray, int *profitArray)
{
	if (profitArray[length] >= 0)
		return profitArray[length];
	int maxProfit = INT_MIN;
	int tempProfit;
	for (int currentLength = 1; currentLength <= length; currentLength++)
	{
		tempProfit = priceArray[currentLength] + MemoziedCutRodCalculate(length - currentLength, priceArray, profitArray);
		maxProfit = max(maxProfit, tempProfit);
	}
	profitArray[length] = maxProfit;
	return maxProfit;
}

// BOTTOM-UP-CUT-ROD(p,n) 
int BottomUpCutRod(int length, int *priceArray)
{
	int *profitArray = malloc(sizeof(int)*(length + 1));
	profitArray[0] = 0;
	int maxProfit;
	int tempProfit;
	for (int currentLength = 1; currentLength <= length; currentLength++)
	{
		maxProfit = INT_MIN;
		for (int subLength = 1; subLength <= currentLength; subLength++)
		{
			tempProfit = priceArray[subLength] + profitArray[currentLength - subLength];
			maxProfit = max(maxProfit, tempProfit);
		}
		profitArray[currentLength] = maxProfit;
	}
	return profitArray[length];
}

// EXTENDED-BOTTOM-UP-CUT-ROD(p,n)
int BottomUpCutRodWithProcess(int length, int *priceArray, int *processArray)
{
	int *profitArray = malloc(sizeof(int)*(length + 1));
	//int *processArray = malloc(sizeof(int)*(length + 1));
	profitArray[0] = 0;
	processArray[0] = 0;
	int maxProfit;
	int tempProfit;
	for (int currentLength = 1; currentLength <= length; currentLength++)
	{
		maxProfit = INT_MIN;
		for (int subLength = 1; subLength <= currentLength; subLength++)
		{
			tempProfit = priceArray[subLength] + profitArray[currentLength - subLength];
			if (maxProfit < tempProfit)
			{
				maxProfit = tempProfit;
				processArray[currentLength] = subLength;
			}
		}
		profitArray[currentLength] = maxProfit;
	}
	return profitArray[length];
}

// PRINT-CUT-ROD-SOLUTION(p,n)
void PrintCutRodSolution(int length, int *priceArray)
{
	int *processArray = malloc(sizeof(int)*(length + 1));
	int maxProfit = BottomUpCutRodWithProcess(length, priceArray, processArray);
	while (length > 0)
	{
		printf_s("%d\t", processArray[length]);
		length -= processArray[length];
	}
}

//15.1-3
int CutRodWithCost(int length, int *priceArray, const int cost, int *processArray)
{
	int *profitArray = malloc(sizeof(int)*(length + 1));
	int *numOfCut = malloc(sizeof(int)*(length + 1));
	for (int i = 0; i <= length; i++)
	{
		numOfCut[i] = 0;
	}
	profitArray[0] = 0;
	processArray[0] = 0;
	int tempProfit;
	int maxProfit;
	for (int currentLength = 1; currentLength <= length; currentLength++)
	{
		maxProfit = priceArray[currentLength];
		for (int subLength = 1; subLength < currentLength; subLength++)
		{
			tempProfit = priceArray[subLength] + profitArray[currentLength - subLength] - cost;
			if (maxProfit < tempProfit)
			{
				maxProfit = tempProfit;
				processArray[currentLength] = subLength;
				numOfCut[currentLength] = numOfCut[currentLength - subLength] + 1;
			}
		}
		profitArray[currentLength] = maxProfit;
	}
	return profitArray[length];
}

//15.1-4
int MemoziedCutRodWithProcess(int length, int *priceArray)
{
	int *profitArray = malloc(sizeof(int)*(length + 1));
	int *processArray = malloc(sizeof(int)*(length + 1));
	profitArray[0] = 0;
	processArray[0] = 0;
	for (int i = 1; i <= length; i++)
	{
		profitArray[i] = INT_MIN;
	}
	return MemoziedCutRodWithProcessCalculate(length, priceArray, profitArray, processArray);
	/*int maxProfit = MemoziedCutRodWithProcessCalculate(length, priceArray, profitArray, processArray);
	for (int i = 0; i <= length; i++)
	printf_s("%d\t", processArray[i]);
	printf_s("\n");
	return maxProfit;*/
}

int MemoziedCutRodWithProcessCalculate(int length, int *priceArray, int *profitArray, int *processArray)
{
	if (profitArray[length] >= 0)
		return profitArray[length];
	int maxProfit = INT_MIN;
	int tempProfit;
	for (int currentLength = 1; currentLength <= length; currentLength++)
	{
		tempProfit = priceArray[currentLength] + MemoziedCutRodWithProcessCalculate(length - currentLength, priceArray, profitArray, processArray);
		//maxProfit = max(maxProfit, tempProfit);
		if (maxProfit < tempProfit)
		{
			maxProfit = tempProfit;
			processArray[length] = currentLength;
		}
	}
	profitArray[length] = maxProfit;
	return maxProfit;
}

// 15.1-5
int Fibonacci(int n)
{
	int *array = malloc(sizeof(int)*n);
	array[0] = 1;
	array[1] = 1;
	for (int i = 2; i < n; i++)
	{
		array[i] = array[i - 1] + array[i - 2];
	}
	return array[n - 1];
}


// TestCode
int main_1()
{
	int priceArray[] = { 0,1,5,8,9,10,17,17,20,24,30 };
	//int priceArray[] = { 0,1,5,8,9 };
	int length = sizeof(priceArray) / sizeof(priceArray[0]) - 1;
	int cost = 0;
	int *processArray = malloc(sizeof(int)*(length + 1));
	int maxProfit = MemoziedCutRodWithProcess(length, priceArray);
	printf_s("%d\n", maxProfit);
	//PrintCutRodSolution(length, priceArray);
	getchar();
	return 0;
}
