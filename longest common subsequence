#include<stdio.h>
#include<stdlib.h>
#include<string.h>

// PRINT-LCS
/* processMatrix
1	3
2 	0
*/
void PrintLCS(int **processMatrix, char *array, int rowIndex, int colIndex)
{
	if (rowIndex == 0 || colIndex == 0)
		return;
	if (processMatrix[rowIndex - 1][colIndex - 1] == 1)
	{
		PrintLCS(processMatrix, array, rowIndex - 1, colIndex - 1);
		printf_s("%c\t", array[rowIndex - 1]);
		//printf_s("%d\t", colIndex);
	}
	else if (processMatrix[rowIndex - 1][colIndex - 1] == 2)
	{
		PrintLCS(processMatrix, array, rowIndex, colIndex - 1);
	}
	else // ==3 ==0
	{
		PrintLCS(processMatrix, array, rowIndex - 1, colIndex);
	}
}

// 15.4-2
void PrintLCSWithoutProcess(int **LCSMatrix, char *arrayA, char *arrayB, int rowIndex, int colIndex)
{
	if (rowIndex == 0 || colIndex == 0)
		return;
	if (arrayA[rowIndex - 1] == arrayB[colIndex - 1])
	{
		PrintLCSWithoutProcess(LCSMatrix, arrayA, arrayB, rowIndex - 1, colIndex - 1);
		printf_s("%c\t", arrayA[rowIndex - 1]);
	}
	else if (LCSMatrix[rowIndex][colIndex - 1] > LCSMatrix[rowIndex - 1][colIndex])
	{
		PrintLCSWithoutProcess(LCSMatrix, arrayA, arrayB, rowIndex, colIndex - 1);
	}
	else
	{
		PrintLCSWithoutProcess(LCSMatrix, arrayA, arrayB, rowIndex - 1, colIndex);
	}
}


// LCS-LENGTH(x,y)
int LCSLength(char *arrayA, char *arrayB)
{
	int arrayALength = strlen(arrayA);
	int arrayBLength = strlen(arrayB);
	int **LCSMatrix = malloc(sizeof(int *) * (arrayALength + 1));
	LCSMatrix[0] = malloc(sizeof(int) * (arrayBLength + 1));
	for (int i = 0; i <= arrayBLength; i++)
	{
		LCSMatrix[0][i] = 0;
	}
	int **processMatrix = malloc(sizeof(int *) * arrayALength);
	for (int i = 0; i < arrayALength; i++)
	{
		LCSMatrix[i + 1] = malloc(sizeof(int) * (arrayBLength + 1));
		LCSMatrix[i + 1][0] = 0;
		processMatrix[i] = malloc(sizeof(int) * arrayBLength);
	}

	for (int row = 1; row <= arrayALength; row++)
	{
		for (int col = 1; col <= arrayBLength; col++)
		{
			if (arrayA[row - 1] == arrayB[col - 1])
			{
				LCSMatrix[row][col] = LCSMatrix[row - 1][col - 1] + 1;
				processMatrix[row - 1][col - 1] = 1;
			}
			else
			{
				//LCSMatrix[row][col] = max(LCSMatrix[row - 1][col], LCSMatrix[row][col - 1]);
				if (LCSMatrix[row - 1][col] == LCSMatrix[row][col - 1])
				{
					LCSMatrix[row][col] = LCSMatrix[row - 1][col];
					processMatrix[row - 1][col - 1] = 0;
				}
				else if (LCSMatrix[row - 1][col] > LCSMatrix[row][col - 1])
				{
					LCSMatrix[row][col] = LCSMatrix[row - 1][col];
					processMatrix[row - 1][col - 1] = 3;
				}
				else
				{
					LCSMatrix[row][col] = LCSMatrix[row][col - 1];
					processMatrix[row - 1][col - 1] = 2;
				}
			}
		}
	}

	/*for (int i = 0; i < arrayALength; i++)
	{
	for (int j = 0; j < arrayBLength; j++)
	{
	printf_s("%d\t", processMatrix[i][j]);
	}
	printf_s("\n");
	}*/
	//PrintLCS(processMatrix, arrayA, arrayALength, arrayBLength);
	PrintLCSWithoutProcess(LCSMatrix, arrayA, arrayB, arrayALength, arrayBLength);
	return LCSMatrix[arrayALength][arrayBLength];
}

// 15.4-3
// MEMOIZED-LCS-LENGTH(x,y)
int MemoizedLCSLength(char *arrayA, char *arrayB)
{
	int arrayALength = strlen(arrayA);
	int arrayBLength = strlen(arrayB);
	int **LCSMatrix = malloc(sizeof(int *) * (arrayALength + 1));
	for (int i = 0; i <= arrayALength; i++)
	{
		LCSMatrix[i] = malloc(sizeof(int) * (arrayBLength + 1));
	}
	for (int row = 0; row <= arrayALength; row++)
	{
		for (int col = 0; col <= arrayBLength; col++)
		{
			LCSMatrix[row][col] = INT_MAX;
		}
	}
	return MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, arrayALength, arrayBLength);
	/*int length = MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, arrayALength, arrayBLength);
	PrintLCSWithoutProcess(LCSMatrix, arrayA, arrayB, arrayALength, arrayBLength);
	return length;*/
}

int MemoizedLCSLengthCalculate(char *arrayA, char *arrayB, int **LCSMatrix, int rowIndex, int colIndex)
{
	if (LCSMatrix[rowIndex][colIndex] != INT_MAX)
		return LCSMatrix[rowIndex][colIndex];
	if (rowIndex == 0 || colIndex == 0)
	{
		LCSMatrix[rowIndex][colIndex] = 0;
		return 0;
	}
	if (arrayA[rowIndex - 1] == arrayB[colIndex - 1])
	{
		LCSMatrix[rowIndex][colIndex] = MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, rowIndex - 1, colIndex - 1) + 1;
	}
	else if (MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, rowIndex - 1, colIndex)
		> MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, rowIndex, colIndex - 1))
	{
		LCSMatrix[rowIndex][colIndex] = MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, rowIndex - 1, colIndex);
	}
	else
	{
		LCSMatrix[rowIndex][colIndex] = MemoizedLCSLengthCalculate(arrayA, arrayB, LCSMatrix, rowIndex, colIndex - 1);
	}
	return LCSMatrix[rowIndex][colIndex];
}

// 15.4-5
int lengthOfLIS(int* nums, int numsSize)
{
	if (numsSize <=1)
		return numsSize;

	int *lengthArray = malloc(sizeof(int) * numsSize);
	lengthArray[0] = 1;
	int maxNum = INT_MIN;
	for (int i = 1; i < numsSize; i++)
	{
		lengthArray[i] = 1;
		for (int j = i - 1; j >= 0; j--)
		{
			if (nums[i] > nums[j])
				lengthArray[i] = max(lengthArray[i], lengthArray[j] + 1);
		}
		maxNum = max(maxNum, lengthArray[i]);
	}
	return maxNum;
}

// 15.5-5
int binarySearch(int *array, int size, int target)
{
	int start = 0;
	int end = size - 1;
	int mid;
	while (start <= end)
	{
		mid = start + (end - start) / 2;
		if (array[mid] == target)
		{
			return mid;
		}
		else if (array[mid] < target)
		{
			start = mid + 1;
		}
		else
		{
			end = mid - 1;
		}
	}
	return start;
}

int lengthOfLISWithBinarySearch(int* nums, int numsSize)
{
	if (numsSize < 1)
		return numsSize;
	/*int *lengthArray = malloc(sizeof(int) * numsSize);
	lengthArray[0] = 1;*/
	int *LISarray = malloc(sizeof(int) * numsSize);
	LISarray[0] = INT_MIN;
	int maxLength = 0;
	int LISposition;
	for (int i = 0; i < numsSize; i++)
	{
		if (nums[i] > LISarray[maxLength])
		{
			maxLength++;
			LISarray[maxLength] = nums[i];
		}
		else
		{
			LISposition = binarySearch(LISarray, maxLength, nums[i]);
			if (nums[i] < LISarray[LISposition])
			{
				LISarray[LISposition] = nums[i];
			}
		}
	}
	return maxLength;
}

// TextCode
int main_4()
{
	// 15.4-1
	/*char *a = "10010101";
	char *b = "010110110";*/
	char *a = "abcbdab";
	char *b = "bdcaba";
	//int length = LCSLength(a, b);
	//int length = MemoizedLCSLength(a, b);
	int array[] = { 1,2,3,4,5,6,7,8 };
	getchar();
	return 0;
}
